name: CI/CD Pipeline - Build and Deploy Docker Image

on:
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [ main, develop ] # develop branch is for testing

jobs:
  ci-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: "Step 1: Checkout Code and Prepare Dependencies"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Step 1: Set up Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: clubhub-web/package-lock.json

      - name: "Step 1: Install Dependencies"
        working-directory: ./clubhub-web
        run: |
          npm ci
          echo "All dependencies installed successfully"
          echo "Dependencies ready for testing and building"

      - name: "Step 1: Prepare for Build"
        working-directory: ./clubhub-web
        run: |
          echo "Preparing for build..."
          echo "Build preparation completed successfully"

      - name: "Step 2: Set up Docker for Branch Build"
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: "Step 2: Login to Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: "Step 2: Generate Version Tag"
        id: version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          # Extract version from commit message (format: vx.x.x) or use timestamp
          VERSION=$(git log -1 --pretty=%B | grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+' | head -1)
          if [ -z "$VERSION" ]; then
            echo "No version found in commit message, generating timestamp version"
            if [ "$BRANCH_NAME" != "main" ]; then
              VERSION="v$(date +%Y.%m.%d-%H%M%S)-$BRANCH_NAME"
            else
              VERSION="v$(date +%Y.%m.%d-%H%M%S)"
            fi
          else
            if [ "$BRANCH_NAME" != "main" ]; then
              VERSION="$VERSION-$BRANCH_NAME"
            fi
          fi
          echo "Generated version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: "Step 3: Build Docker Image with Branch and Version Tags"
        working-directory: ./clubhub-web
        run: |
          echo "Building Docker image with branch and version tags..."
          
          # Build once with branch and version tags only
          docker build \
            --secret id=NEXT_PUBLIC_FIREBASE_API_KEY,src=<(echo "${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}") \
            --secret id=NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,src=<(echo "${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}") \
            --secret id=NEXT_PUBLIC_FIREBASE_DATABASE_URL,src=<(echo "${{ secrets.NEXT_PUBLIC_FIREBASE_DATABASE_URL }}") \
            --secret id=NEXT_PUBLIC_FIREBASE_PROJECT_ID,src=<(echo "${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}") \
            --secret id=NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,src=<(echo "${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}") \
            --secret id=NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,src=<(echo "${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}") \
            --secret id=NEXT_PUBLIC_FIREBASE_APP_ID,src=<(echo "${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}") \
            --secret id=ADMIN_FIREBASE_PROJECT_ID,src=<(echo "${{ secrets.ADMIN_FIREBASE_PROJECT_ID }}") \
            --secret id=ADMIN_FIREBASE_CLIENT_EMAIL,src=<(echo "${{ secrets.ADMIN_FIREBASE_CLIENT_EMAIL }}") \
            --secret id=ADMIN_FIREBASE_PRIVATE_KEY,src=<(echo "${{ secrets.ADMIN_FIREBASE_PRIVATE_KEY }}") \
            -t ${{ secrets.DOCKER_USERNAME }}/clubhub:${{ steps.version.outputs.branch }} \
            -t ${{ secrets.DOCKER_USERNAME }}/clubhub:${{ steps.version.outputs.version }} \
            --platform linux/amd64 \
            .
          
          echo "Docker image built with tags:"
          echo "  - ${{ steps.version.outputs.branch }}"
          echo "  - ${{ steps.version.outputs.version }}"

      - name: "Step 3: Push Branch and Version Tags to Docker Hub"
        run: |
          echo "Pushing branch and version tagged images to Docker Hub..."
          docker push ${{ secrets.DOCKER_USERNAME }}/clubhub:${{ steps.version.outputs.branch }}
          docker push ${{ secrets.DOCKER_USERNAME }}/clubhub:${{ steps.version.outputs.version }}
          echo "Images pushed successfully:"
          echo "  - ${{ secrets.DOCKER_USERNAME }}/clubhub:${{ steps.version.outputs.branch }}"
          echo "  - ${{ secrets.DOCKER_USERNAME }}/clubhub:${{ steps.version.outputs.version }}"

  cd-pipeline:
    runs-on: ubuntu-latest
    needs: ci-pipeline
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    
    steps:
      - name: "Step 4: Determine Branch Name"
        id: branch
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Deploying branch: $BRANCH_NAME"

      - name: "Step 4: Setup SSH and Deploy to Server"
        run: |
          echo "Setting up SSH connection and deploying to server..."
          
          # Create SSH key file
          echo "${{ secrets.DEPLOY_KEY }}" > deploy_key.pem
          chmod 600 deploy_key.pem
          
          # Create environment file content
          cat > my_env << EOF
          NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_DATABASE_URL=${{ secrets.NEXT_PUBLIC_FIREBASE_DATABASE_URL }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          ADMIN_FIREBASE_PROJECT_ID=${{ secrets.ADMIN_FIREBASE_PROJECT_ID }}
          ADMIN_FIREBASE_CLIENT_EMAIL=${{ secrets.ADMIN_FIREBASE_CLIENT_EMAIL }}
          ADMIN_FIREBASE_PRIVATE_KEY=${{ secrets.ADMIN_FIREBASE_PRIVATE_KEY }}
          EOF
          
          # Copy environment file to server
          scp -i deploy_key.pem -o StrictHostKeyChecking=no my_env ubuntu@3.16.162.15:~/
          
          # Execute deployment commands on server
          ssh -i deploy_key.pem -o StrictHostKeyChecking=no ubuntu@3.16.162.15 << 'EOF'
            echo "Connecting to server and starting nginx-based blue-green deployment..."
            
            # Login to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            
            # Install nginx if not already installed
            sudo apt-get update -y
            sudo apt-get install -y nginx
            
            # Stop and remove new container if it exists (from previous failed deployment)
            sudo docker stop clubhub-new || true
            sudo docker rm clubhub-new || true
            
            # Pull the latest image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/clubhub:${{ steps.branch.outputs.branch }}
            
            # Deploy new container on internal port (blue environment)
            sudo docker run -d \
              --name clubhub-new \
              -p 3001:3000 \
              --env-file ~/my_env \
              --restart=unless-stopped \
              ${{ secrets.DOCKER_USERNAME }}/clubhub:${{ steps.branch.outputs.branch }}
            
            # Wait for new container to be ready
            echo "Waiting for new container to be ready..."
            sleep 30
            
            # Verify new container is running
            echo "New container status:"
            sudo docker ps | grep clubhub-new
            
            # Show new container logs for verification
            echo "New container logs (last 20 lines):"
            sudo docker logs --tail 20 clubhub-new
            
            # Run E2E tests against new deployment (internal port 3001)
            echo "Running E2E tests against new deployment on port 3001..."
            
            # Install and run Playwright tests
            cd /tmp
            npm install -g playwright
            npx playwright install --with-deps
            
            # Run E2E tests against the new deployment
            npx playwright test --base-url=http://localhost:3001 || {
              echo "E2E tests failed! Rolling back new deployment..."
              sudo docker stop clubhub-new
              sudo docker rm clubhub-new
              echo "Keeping old deployment active"
              exit 1
            }
            
            echo "E2E tests passed! Switching traffic to new deployment..."
            
            # Stop old container (green environment)
            sudo docker stop clubhub || true
            sudo docker rm clubhub || true
            
            # Deploy new container on the main port
            sudo docker run -d \
              --name clubhub \
              -p 3000:3000 \
              --env-file ~/my_env \
              --restart=unless-stopped \
              ${{ secrets.DOCKER_USERNAME }}/clubhub:${{ steps.branch.outputs.branch }}
            
            # Update nginx configuration to point to new container
            sudo tee /etc/nginx/sites-available/clubhub << 'NGINX_CONFIG'
            server {
                listen 80;
                server_name _;
                
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
            NGINX_CONFIG
            
            # Enable the site and reload nginx (zero downtime)
            sudo ln -sf /etc/nginx/sites-available/clubhub /etc/nginx/sites-enabled/
            sudo nginx -t && sudo systemctl reload nginx
            
            # Clean up test container
            sudo docker stop clubhub-new
            sudo docker rm clubhub-new
            
            # Verify final deployment
            echo "Final container status:"
            sudo docker ps
            
            echo "Nginx-based blue-green deployment completed successfully with zero downtime!"
          EOF
          
          # Clean up local files
          rm -f deploy_key.pem my_env
          