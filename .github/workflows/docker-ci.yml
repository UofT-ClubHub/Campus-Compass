name: Build and Deploy Docker Image

on:
  pull_request:
    types: [closed]
    branches:
      - develop
      - main
      - feat/dockerSetup

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64,linux/amd64
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create .env file for Docker Compose
        run: |
          cat <<EOF > clubhub-web/.env
          NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_DATABASE_URL=${{ secrets.NEXT_PUBLIC_FIREBASE_DATABASE_URL }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          ADMIN_FIREBASE_PROJECT_ID=${{ secrets.ADMIN_FIREBASE_PROJECT_ID }}
          ADMIN_FIREBASE_CLIENT_EMAIL=${{ secrets.ADMIN_FIREBASE_CLIENT_EMAIL }}
          ADMIN_FIREBASE_PRIVATE_KEY="${{ secrets.ADMIN_FIREBASE_PRIVATE_KEY }}"
          CHATBOT_TEST_MODE=${{ secrets.CHATBOT_TEST_MODE }}
          EOF

      - name: Run Docker Compose (Detached)
        run: docker compose up -d
        env:
          DOCKER_DEFAULT_PLATFORM: linux/arm64

      - name: "Mock: Run E2E Tests"
        run: |
          echo "Running E2E tests..."
          sleep 3
          echo "Tests passed!"

      - name: Tag and Push Docker Image
        run: |
          # Get version from PR title or use timestamp
          VERSION="v$(date +%Y.%m.%d-%H%M%S)"
          echo "Version: $VERSION"
          
          # Delete all images tagged with v.* format from Docker Hub
          docker images ${{ secrets.DOCKER_USERNAME }}/clubhub --format "table {{.Tag}}" | grep "^v[0-9]" | xargs -I {} docker hub rm ${{ secrets.DOCKER_USERNAME }}/clubhub:{} || true
          
          # Delete all images tagged with v.* format from local cache
          docker images ${{ secrets.DOCKER_USERNAME }}/clubhub --format "table {{.Tag}}" | grep "^v[0-9]" | xargs -I {} docker rmi ${{ secrets.DOCKER_USERNAME }}/clubhub:{} || true
          
          # Tag and push new version
          docker tag clubhub_frontend ${{ secrets.DOCKER_USERNAME }}/clubhub:$VERSION
          docker push ${{ secrets.DOCKER_USERNAME }}/clubhub:$VERSION

      - name: Tear Down Docker Containers
        run: docker compose down